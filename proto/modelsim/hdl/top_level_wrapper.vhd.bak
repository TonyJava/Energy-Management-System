--------------------------------------------------------------------------------
-- Project : PROJECTNAME
-- Author : Donald MacIntyre - djm4912
-- Date : 7/8/2015
-- File : top_level_wrapper.vhd
--------------------------------------------------------------------------------
-- Description :
--------------------------------------------------------------------------------
-- $Log$
--------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_unsigned.all;

entity top_level_wrapper is
    Port (
		clk : in std_logic;		-- 10 MHz
		rst_n : in std_logic
    );
end top_level_wrapper;

architecture behav of top_level_wrapper is

--------------------------------------------------------------------------------
-- Signal Declarations
--------------------------------------------------------------------------------
signal data_out_sig : std_logic_vector(15 downto 0);
signal data_out_valid_sig : std_logic;
signal rd_sig : std_logic;
signal wr_sig : std_logic;
signal data_wr : std_logic_vector (19 downto 0);
signal data_rd : std_logic_vector (19 downto 0);
--------------------------------------------------------------------------------
-- Component Declarations
--------------------------------------------------------------------------------
component genData is
    Port (
        clk : in std_logic;         -- 10 MHz clock
        rst_n : in std_logic;
        data_out : out std_logic_vector(15 downto 0);
        data_out_valid : out std_logic
    );
end component;

component fifo IS
	PORT
	(
		clock		: IN STD_LOGIC ;
		data		: IN STD_LOGIC_VECTOR (19 DOWNTO 0);
		rdreq		: IN STD_LOGIC ;
		wrreq		: IN STD_LOGIC ;
		empty		: OUT STD_LOGIC ;
		full		: OUT STD_LOGIC ;
		q		: OUT STD_LOGIC_VECTOR (19 DOWNTO 0)
	);
END component;
--------------------------------------------------------------------------------

begin

genDatainst : genData 
    Port map(
        clk => clk,        -- 10 MHz clock
        rst_n => rst_n,
        data_out => data_out_sig,
        data_out_valid => data_out_valid_sig
    );

fifo_inst : fifo
	PORT map
	(
		clock		=> clk,
		data		 => data_wr,
		rdreq		=> rd_sig,
		wrreq		=> wr_sig,
		empty		=> open,
		full		 => open,
		q		   => data_rd
	);
	
process
begin
    rd_sig <= '0';
    wait for rising_edge(clk);
    data_wr <= (others => '0');
    wr_sig <= '1';
    wait for rising_edge(clk);
    wr_sig <= '0';
end process;

end behav;